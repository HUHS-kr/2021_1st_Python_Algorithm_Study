# Greedy Algorithm

# Greedy Algorithm의 Greedy는 탐욕을 뜻하며 Greedy Algorithm은 탐욕 알고리즘이라고 불린다.
# 어떠한 선택을 해야하는 상황을 마주하면 미래를 생각하지 않고 그 순간 가장 최적의 선택지를 선택하는 알고리즘을 그리디 알고리즘이라고 한다.

# 한번 적당한(?) 예시를 들어 생각해 보았다.
# 누군가 높이 8000m의 히말라야 산맥 한가운데에서 조난을 당했다고 하자.
# 이 사람은 핸드폰도 없고 나침반도 없어 내려오는 길을 알지 못한다.(물론 마실 물과 산소통, 음식도 없다)
# 그럼 이사람에게 주어진 탈출 방법은 크게 두 가지 방법이 있을 것이다.
1. 히말라야 산맥의 가장 높은 에베레스트에 올라가 꼭대기에서 아래를 내려 보며 탈출 경로를 생각해 본다.-> 탈출 경로를 외운다 -> 외운 경로로 내려간다
2. 그냥 자신의 위치에서 더 이상 올라가지 않고 아무 생각 없이 내려 온다.
# 1번 방법은 오히려 자신의 생존 확률을 갉아 먹는 행위일 것이다. 에베레스트를 등산하는 것은 탈출 하는 것 보다 어렵다.
# 그럼 2 번 방법을 써야 할텐데, 그냥 아무 생각 없이 내려 오면 오히려 길을 잘 못 들어 시간만 낭비하고 죽을 수도 있다.
# 이떄 아주 좋은 생각을 해냈다. 2번 방법을 써서 내려오긴 내려 올것이다.
# 하지만, 멍청하게 아무생각 없이 내려오는 것이 아니라 특정한 알고리즘을 따라 내려 올것이다.
# 알고리즘은, 한발자국 한발자국 내려 올떄마다 자신의 위치를 360도 돌며 가장 경사가 가파른 곳을 선택해서 내려오는 것이다.
# 이게 바로 그리디 알고리즘이다. 자신이 처한 상태에서 가장 좋아보이는 최적의 선택지를 선택하는 것이다.
# 그럼 자신은 항상 아래로만 내려갈 것이다.
# 근데 그리디 알고리즘에는 큰 문제점이 있다. 이 사람은 산에서 내려가긴 내려갈텐데 그게 탈출구라는 보장은 없다.
# 그냥 히말라야 산맥의 하나의 골( 마루와 골 중에 골)로 내려 가는 것일 수도 있고, 경사가 가파른 곳만 선택하다보면 탈출구는 커녕 크레바스에 빠질 수도 있다.
# 물론, 운이 좋아서 산을 탈출 할 수도 있을 것이다.


# 그러므로, 그리디 알고리즘은 빠르고 생각하기 쉽다는 장점은 있지만, 그게 항상 최적의 해를 도출해낸다는 보장이 없기 때문에 어렵기도 하다.


# 문제를 풀면서 가장 어려었던 문제 하나만 정리하자면,

 이것이 코딩 테스트다 pg 314 <만들수 없는 금액>
 
 
