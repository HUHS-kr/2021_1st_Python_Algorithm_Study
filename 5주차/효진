#오름차순 정렬

#선택 정렬: 매번 처리되지 않은 데이터 중 가장 작은 것을 선택해서 앞으로 보낸다.
*스와프 소스코드
 # 0 인덱스와 1 인덱스의  원소 교체하기
array = [3, 5]
array[0], array[1] = array[1], array[0]
print(array)

*선택정렬 소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 8]

for i in range(len(array)):
    for j in range(i+1, len(array)):
        if array[i] > array[j]:
            array[i], array[j] = array[j], array[i]

print(array)
선택 정렬의 시간 복잡도는 O(N^2)이다.

#삽입 정렬: 하나씩 삽입할 자리를 판단하며 정렬.
*삽입 정렬 소스코드

#퀵 정렬: 피벗 활용.
*퀵정렬 소스코드
array = [5, 7, 9, 0, 3, 1, 6, 2, 4, 8]
def quick_sort(array):
  if len(array) <= 1:
    return array
  
  pivot = array[0]
  tail = array[1:]
  
  left_side = [x for x in tail if x <= pivot]
  right_side = [x for x in tail if x > pivot]
  
  return quick_sort(left_side)+[pivot]+quick_sort(right_side)
print(quick_sort(array))
퀵정렬의 시간 복잡도는 O(NlogN)이다.

#계수 정렬: 별도의 리스트를 선언하고, 그 안에 정렬에 대한 정보를 담는다.
*소스코드
array = [7, 5, 9, 0, 3, 1, 6, 2, 9, 1, 4, 8, 0, 5, 2]
count = [0] * (max(array)+1)
for i in range(len(array)):
  count[array[i]] += 1

for i in range(len(count)):
   for j in range(count[i]):
      print(i, end = '')
계수 정렬의 시간 복잡도, 공간 복잡도는 O(N+K)이다.
