정렬: 데이터를 특정한 기준에 따라 순서대로 나열하는 것

# 선택 정렬: 매번 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 자리를 바꾸고, 그 다음으로 작은 데이터를 택해 앞에서 두 번째에 위치해 있는 데이터와 자리를 바꿈
- 가장 작은 데이터를 앞으로 보내는 과정을 N-1번 반복하면 됨
- 선택 정렬의 시간 복잡도: O(N^2)
- ex) 7 5 9 0 3 1 6 2 4 8
   -> 0 5 9 7 3 1 6 2 4 8
   -> 0 1 9 7 3 5 6 2 4 8
   -> 0 1 2 7 3 5 6 9 4 8
   -> 0 1 2 3 7 5 6 9 4 8
              .
              . 
   -> 0 1 2 3 4 5 6 7 8 9
   
 # 삽입 정렬: 특정한 데이터를 적절한 위치에 삽입하는 것.
 - 특정한 데이터가 적절한 위치에 들어가기 이전에 그 앞까지의 데이터는 이미 정렬되어 있다고 가정
 - 삽입 정렬의 시간 복잡도: O(N^2)
 
 # 퀵 정렬: 기준을 설정하여 큰 수와 작은 수를 교환하고 리스트를 반으로 나누는 방식
 - 피벗 설정 -> 왼쪽에서부터 피벗보다 큰 데이터 찾기 -> 오른쪽에서부터 피벗보다 작은 데이터 찾기 -> 큰 데이터와 작은 데이터의 위치 서로 교환
 - 퀵 정렬의 시간 복잡도: O(NlogN)
 
 # 계수 정렬: 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘
 - 가장 큰 데이터와 가장 작은 데이터의 차이가 너무 크다면 계수 정렬은 사용할 수 없음
 - 일반적으로 별도의 리스트를 선언하고 그 안에 정렬에 대한 정보를 담음.
 - 계수 정렬의 시간 복잡도: O(N+K)     //N: 데이터의 개수, K: 데이터 중 최대값의 크기
 - 계수 정렬의 공간 복잡도: O(N+K)
 
 # 파이썬의 정렬 라이브러리: sorted() 함수 제공
 - 퀵 정렬과 동작 방식이 비슷한 병합 정렬을 기반으로 만들어짐.
 - 최악의 경우에도 시간 복잡도 O(NlogN)을 보장
 
 
