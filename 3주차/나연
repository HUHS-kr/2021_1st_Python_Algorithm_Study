[04 구현]

<01 아이디어를 코드고 바꾸는 구현>
-구현: 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정
-구현 유형 문제: 풀이를 떠올리기는 쉽지만 소스코드로 옮기기 어려운 문제
-완전 탐색: 모든 경우의 수를 주저없이 다 계산
-시뮬레이션: 문제에세 제시한 알고리즘을 한 단계씩 차례데로 직접 수행

고려해야할 점
-C/C+과 자바에서는 자료형 int(4byte),long long(8byte), BigInteger(가변적)에 따라 표현할 수 있는 정수의 범위가 다르지만, 파이썬을 이를 크게 신경쓰지 않아도 된다.
-파이썬의 경우 데이터의 개수(리스트의 길이)에 따른 메모리 사용량을 고려해야하지만 드물다. 
-Pypy는 파이썬의 문법을 지원하며 속도가 훨씬 빠르므로 코딩 테스트 환경이 Pypy도 지원할 경우 이를 활용할 것


#예제 4-1 상하좌우(시뮬레이션 유형)

#N을 입력받기
n=int(input())
x,y=1,1
plans=input().split()

#L,R,U,D 에 따른 이동방향
dx=[0,0,-1,1]
dy=[-1,1,0,0]
move_types=['L', 'R', 'U', 'D']

#이동 계획을 하나씩 확인
for plan in plans:
    #이동 후 좌표 구하기
    for i in range(len(move_types)):
        if plan==move_types[i]:
            nx= x+dx[i]
            ny= y+dy[i]
    #공간을 벗어나는 경우 무시
    if nx<1 or ny<1 or nx>n or ny>n:
        continue
    #이동 수행
    x,y= nx,ny
    
print(x,y)
