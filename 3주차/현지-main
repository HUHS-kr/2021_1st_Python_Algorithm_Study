구현 - 머릿속에 있는 알고리즘을 소스코드로 바꾸는 과정.
완전 탐색 : 모든 경우의 수를 계산
시뮬레이션 : 문제에서 제시한 알고리즘을 한 단계씩 차례로 수행
int, longlong이 담을 수 없을 정도로 큰 수를 담을 변수를 만들 때에는 흔히 BigInteger 클래스를 이용. 하지만 보통 코테에서는 이 정도로 큰 수를 다루는 문제는 잘 출제되지 않음.
알고리즘 문제 풀 때 시간 복잡도를 예상하여 풀기.

#럭키 스트레이트 - 자릿수를 반으로 나누어 왼쪽의 합과 오른쪽의 합이 같은지 알아보기
1. length()로 총 자릿수 확인
2. 왼쪽 부분 자릿수 합 더하기
3. 오른쪽 부분 자릿수 합과 왼쪽 부분 자릿수 합이 같은지 확인

#문자열 재정렬 - 입력된 문자열에서 모든 알파벳은 오름차순으로 정렬하고, 그 뒤에 모든 숫자를 더한 값을 이어서 출력하기
1. 문자열 입력
2. 하나씩 확인하면서 숫자이면 따로 합계 계산, 알파벳이면 별도의 리스트에 저장
3. 알파벳 오름차순 정렬
4. 숫자 합계는 가장 뒤에 붙여서 출력하기

#문자열 압축 - 문자열을 잘라 압축할 때 가장 짧게 되는 경우 찾기
1. 1부터 압축 단위를 늘려 가며 확인
2. 단위만큼 증가시키며 이전 문자열과 비교
4. 더 압축하지 못하는 경우일 때 마지막에 남는 문자열은 그대로 붙여주기
5. min() 활용하여 압축 문자열 중 가장 짧은 것 찾기

#자물쇠와 열쇠 - 완전탐색 이용
1. 4가지 방향에 대해 90도씩 열쇠 회전
2. 새로운 자물쇠에 열쇠가 들어맞으면 자물쇠의 중간 부분이 모두 1이 됨

#뱀 - 시뮬레이션 문제
1. 매번 뱀의 위치를 리스트에 기록
2. 맨 처음에 뱀은 오른쪽을 보고 있음.
3. 만약 사과가 없으면 뱀 이동 후에 꼬리 제거
4. 사과가 있으면 이동하고 나서 꼬리 그대로 두기
5. 벽이나 뱀의 몸통과 부딪히면 종료
6. 부딪히지 않았을 경우엔 다음 위치로 머리 이동

#기둥과 보 설치 - 시뮬레이션 문제
1. 기둥은 '바닥 위' 혹은 '보의 한쪽 끝부분 위' 혹은 '다른 기둥 위'에만 있어야 함
2. 보는 한쪽 끝부분이 기둥 위이거나 양쪽 끝부분이 다른 보와 동시에 연결되어 있어야 함
3. 설치/삭제 연산 시 일일이 해당 구조물이 정상인지 확인

#치킨 배달 - 치킨집을 최대 M개로 만드는 동시에 집들과 M개의 치킨집까지의 거리 줄이기
1. 모든 집에 대해 가장 가까운 치킨집 찾기
2. 각각 가장 가까운 치킨집까지의 거리 더하기 -> 치킨 거리의 합
3. 치킨 거리의 합의 최소를 찾아 출력

#외벽 점검 - 최소한의 친구들을 투입하여 취약 지점을 점검할 때 보내야 하는 친구의 최솟값 구하기
1. '원형' 을 일자 형태로 만들어 주기
2. 현재 점검 중인 친구가 가능 범위를 벗어나면 새로운 친구 투입
3. 더 이상 친구 투입이 불가능하면 종료
4. 최솟값 계산하기
