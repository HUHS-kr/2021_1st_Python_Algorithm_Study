[05 DFS/BFS]

<1 꼭 필요한 자료구조 기초>

탐색: 많은 양의데이터 중 원하는 것을 찾는 과정
자료구조: 데이터를 표현하고 관리하고 처리하기 위한 구조
  핵심함수:삽입(push), 삭제(pop)
  오버플로: 자료구조가 수용할 수 있는 데이터의 크기가 이미 찬 상태에서 삽입 연산을 수행할 때
  언더플로: 데이터가 전혀 들어있지 않은 상황에서 삭제 연산을 수행할 때
  
스택
-선입후출(FILO), 후입선출(LIFO)
-별도의 라이브러리 필요 X
-리스트에 append()와 pop() 메서드 이용

큐
-선입선출(FIFO)
-파이썬에서 collections 모듈의 deque 자료구조 활용
-list(deque)를 이용하여 리스트 자료형으로 변환 가능


재귀함수
-자기자신을 호출하는 함수
-재귀함수의 종료조건: if 문 등을 이용하여 종료조건을 명시
-컴퓨터 내부에서 재귀함수는 스택 자료구조를 이용
-점화식 등을 표현할 때 반복문보다 재귀함수의 코드가 더 간결함

<2 탐색 알고리즘 DFS/BFS>

DFS
:깊이 우선 탐색, 그래츠에서 깊은 부분을 우선적으로 탐색하는 알고리즘

-그래프의표현방식: 인접행렬, 인접리스트
  -인접행렬
    -2차원 배열에 각 노드가 연결된 형태를 기록하는 방식
    -파이썬에서는 2차원 리스트로 구현 
    -연결되어있지 않은 노드끼리는 무한 비용(매우 큰 수)로 작성
  -인접리스트
    -모든 노드에 연결된노드에 대한 정보를 차례대로 연결하여 저장
  -인접행렬 방식은 연결되지 않은 노드에 대해서 불필요하게 메모리를 낭비
  -인접리스트 방식은 연결된 데이터를 하나씩 확인하기 때문에 특정한 두 노드가 연결되어 있는지에 대한 정보를 얻는 속도가 느리다.
 
 DFS의 동작과정
 
  
