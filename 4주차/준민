스택(Stack) : 후입선출
+ push
- pop

큐(Queue) : 선입선출
+ append
- popleft
reverse

deque = stack + queue
리스트에 비해 데이터 출입 효율적 

재귀 함수 (Recursive Function) : 자기 자신을 다시 호출
! 종료/탈출 조건 필요



(노드)--간선--(정점)
=> 두 노드(정점)은 인접함
=> 인접하지 않은 두 노드 끼리의 비용은 무한(INF)

인접행렬 : 연결 관계(비용)를 행렬로 표시
빠른 속도, 높은 메모리 사용량

인접리스트 : 연결 관계를 리스트로 표시
느린 속도, 적은 메모리 사용량

예) (2)--5--(0)--7--(1)
인접행렬
  | 0  1   2
--|----------
0 | 0  7   5
1 | 7  0  INF
2 | 5 INF  0

인접리스트
(0,1) (0,2)


깊이 우선 탐색 (DFS Depth First Search) : 그래프에서 깊은 부분 우선 탐색
+ 스택, 재귀함수
(존재하는 인접 노드가 있다면 먼저 탐색)

너비 우선 탐색 (BFS Breadth First Search) : 가까운 노드부터 탐색
+ 큐, 반복문
(탐색할 때마다 큐에 탐색할 주변 노드 추가)
