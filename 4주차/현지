# 탐색: 많은 양의 데이터 중 원하는 데이터를 찾는 과정
# 자료구조: 데이터를 표현하고 관리하고 처리하기 위한 구조
     - 스택과 큐는 자료구조의 기초 개념으로, '삽입'과 '삭제' 두 함수로 구성됨

# 스택: 아래에서 위로 쌓임. 선입후출(first in last out)구조
     - 파이썬에서 append()와 pop() 메서드를 이용하면 스택 자료구조와 동일하게 동작
     
# 큐: 선입선출(first in first out) 구조
     - 파이썬으로 큐를 구현할 때는 deque 자료구조를 활용.
     ( deque는 스택과 큐의 장점을 모두 갖고 있음. 효율적이고 간단 )

# 재귀함수: 자기 자신을 다시 호출하는 함수
     - 종료 조건을 명시하지 않으면 함수가 무한 호출될 수 있음.
     - 대표 예제: 팩토리얼 문제
     - 반복문 대신 재귀 함수를 사용하면 코드가 더 간결해짐.
     
# DFS: 그래프에서 깊은 부분을 우선적으로 탐색
     - 그래프는 노드와 간선으로 표현됨
     - 인접 행렬 방식: 2차원 배열에 각 노드가 연결된 형태 기록
     - 인접 리스트 방식: 모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
       (연결 리스트 이용)
     - 인접 행렬 방식은 모든 관계를 저장하기 때문에 노드 개수가 많을수록 메모리가 불필요하게 낭비됨.
       반면 인접 리스트 방식은 연결된 정보만을 저장하기 때문에 메모리를 효율적으로 사용함.
     - 특정한 경로로 탐색하다가 특정한 상황에서 최대한 깊숙이 들어가서 노드를 방문 후 다시 돌아가 다른 경로로 탐색
     * 방문 처리: 스택에 한 번 삽입되어 처리된 노드가 다시 삽입되지 않도록 하는 것 *
     
     
# BFS: 가까운 노드부터 탐색하는 알고리즘.
     - 선입선출 방식인 큐 자료구조를 이용하는 것이 정석.
     - 일반적으로 실제 수행 시간은 DFS보다 좋은 편.
     - 동작 방식: 1) 탐색 시작 노드를 큐에 삽입 후 방문 처리 -> 2) 큐에서 노드를 꺼내 해당 노드의 인접 노드 중 방문하지 않은 노드를 모두 큐에 삽입 후
       방문 처리 -> 3) 2)번 과정을 더 이상 수행할 수 없을 때까지 반복
     - 코딩테스트에서 보통은 DFS보다 BFS 구현이 조금 더 빠르게 동작함

     
