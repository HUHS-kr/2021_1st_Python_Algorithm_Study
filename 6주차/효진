#순차 탐색: 리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 확인하는 방법
#이진 탐색: 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법.
 이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정한다.
 이진 탐색의 시간 복잡도: O(logN)

#이진탐색) 재귀적 구현
def binary_search(array, target, start, end):
  if start > end:
    return None
    mid = (start + end) // 2
  if array[mid] == target:
    return mid
  # 왼쪽 확인
  elif array[mid] > target:
     return binary_search(array, target, start, mid - 1)
  # 오른쪽 확인
  else:
     return binary_search(array, target, mid + 1, end)
# n과 target 입력
n, target = list(map(int, input().split()))
# 전체 원소 입력
array = list(map(int, input().split()))
# 출력
result = binary_search(array, target, 0, n - 1)
if result == None:
  print("원소가 존재하지 않습니다")
else:
  print(result + 1)

#이진 탐색) 반복문 구현
def binary_search(array, target, start, end):
  while start <= end:
    mid = (start + end) // 2
    if array[mid] == target:
      return mid
    elif array[mid] > target:
      end = mid - 1
    else:
      start = mid + 1
    return None

# n과 target 입력
n, target = list(map(int, input().split()))

# 전체 원소 입력
array = list(map(int, input().split()))

# 출력
result = binary_search(array, target, 0, n - 1)
if result == None:
  print("원소가 존재하지 않습니다.")
else:
  print(result + 1)
