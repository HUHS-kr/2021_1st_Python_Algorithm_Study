[08 다이나믹 프로그래밍]

-컴퓨터의 연산 속도의 한계, 메모리 공간 한정적이라는 제약-> 효율적인 알고리즘: 다이나믹 프로그래밍
-다이나믹 프로그래밍을 사용할 수 있는 조건
  1. 큰 문제를 작은 문제로 나눌 수 있다.
  2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

ex) 피보나치 수열- 메모제이션(캐싱) 기법 이용
-구한 정보를 리스트에 저장한다. 재귀적 프로그램을 수행하다가 같은 정보가 필요하면 이미 구한 정답을 리스트에서 가져온다.

-다이나믹 프로그래밍: 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘
-탑다운(하향식) 방식: 큰 문제를 해결하기 위해 작은 문제를 호출, 재귀함수 이용
-보텀업(상향식) 방식: 반복문을 이용하여 작은 문제부터 차그차근 답을 도출

문제를 푸는 단계
-주어진 문제가 다이나믹 프로그래밍 유형임을 파악
-단순히 재귀함수로 비효율적 프로그램 작성 후에 메모제이션이 적용 가능하면 코드를 개선
-가능하면 재귀함수를 이용하는 탑다운 보다는 보컴업 방식으로 구현(스택 크기 한정)
