# 다이나믹 프로그래밍: 큰 문제를 작게 나누고 같은 문제는 한 번씩만 풀어 효율적으로 문제를 해결하는 알고리즘 기법

- ex) 피보나치 수열: 현재의 항은 이전 두 항의 합.
      점화식 작성.
      프로그래밍에서는 단순히 재귀 함수 사용 -> 효율 x
      => 해결책: 한 번 구한 정보는 리스트에 저장, 필요할 때 그대로 가져오기.
         (메모이제이션 또는 캐싱이라고도 함)
      => 시간 복잡도 O(N)

- 재귀 함수를 이용한 다이나믹 프로그래밍: 탑다운 방식, 하향식
- 단순 반복문 이용: 보텀업 방식, 상향식
  'DP 테이블': 결과 저장용 리스트
 
- 실전 예제) 개미 전사
  일직선상의 식량창고에서 최소한 한 칸 이상 떨어진 창고를 약탈해야 함. 이때 최대한 많은 식량 얻기
  아이디어: 왼쪽부터 차례대로 보기.
  1)특정한 i-1번째 식량 창고를 털 경우 -> i번째 식량 창고는 털 수 없음
  2)특정한 i-2번째 식량 창고를 털 경우 -> i번째 식량 창고 털 수 있음
  1), 2) 중에서 더 많은 식량을 털 수 있는 경우를 선택하면 됨.
      
